
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "modi"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "modi-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('modi')
Loading required package: MASS
Loading required package: norm
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BEM")
> ### * BEM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: BEM
> ### Title: BACON-EEM Algorithm for multivariate outlier detection in
> ###   incomplete multivariate survey data
> ### Aliases: BEM
> ### Keywords: robust survey multivariate
> 
> ### ** Examples
> 
> # Bushfire data set with 20% MCAR
> data(bushfirem,bushfire.weights)
> bem.res<-BEM(bushfirem,bushfire.weights,alpha=(1-0.01/nrow(bushfirem))) 
alpha should be less than 0.5: alpha set to 1-alpha
 0.9997368
 BEM has detected 15 outlier(s) in 0.04 seconds. 
 
> print(bem.res$output)
$sample.size
[1] 38

$discarded.observations
[1] NA

$number.of.variables
[1] 5

$significance.level
[1] 0.0002631579

$initial.basic.subset.size
[1] 15

$final.basic.subset.size
[1] 23

$number.of.iterations
[1] 4

$computation.time
   user  system elapsed 
   0.04    0.00    0.06 

$center
[1] 109.2987 149.6075 262.0240 215.3746 276.8635

$scatter
           [,1]      [,2]       [,3]      [,4]      [,5]
[1,]   281.4820  271.1633 -1072.3682 -225.3189 -183.4987
[2,]   271.1633  282.4634  -859.0966 -147.3715 -129.6098
[3,] -1072.3682 -859.0966  5988.1807 1519.9261 1173.1625
[4,]  -225.3189 -147.3715  1519.9261  433.1225  323.3353
[5,]  -183.4987 -129.6098  1173.1625  323.3353  244.3221

$cutpoint
[1] 60.13559

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("BEM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("EAdet")
> ### * EAdet
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EAdet
> ### Title: Epidemic Algorithm for detection of multivariate outliers in
> ###   incomplete survey data.
> ### Aliases: EAdet
> ### Keywords: survey robust multivariate
> 
> ### ** Examples
> 
> data(bushfirem,bushfire.weights)
> det.res<-EAdet(bushfirem,bushfire.weights)

 EA detection has finished with 31 infected points in 0.02 seconds.> print(det.res$output)
$sample.size
[1] 38

$discarded.observations
[1] NA

$missing.observations
named integer(0)

$number.of.variables
[1] 5

$n.complete.records
[1] 11

$n.usable.records
[1] 36

$medians
 X1  X2  X3  X4  X5 
 94 137 262 217 272 

$mads
 X1  X2  X3  X4  X5 
 15  19 164  29  26 

$prob.quantile
[1] 0.9

$quantile.deviations
 X1  X2  X3  X4  X5 
 40  71 312 125 105 

$start
[1] 14

$transmission.function
[1] "root"

$power
[1] 5
attr(,"Csingle")
[1] TRUE

$maxl
[1] 5

$max.min.di
[1] 2.211133

$transmission.distance
[1] 2.211133

$threshold
[1] FALSE

$distance.type
[1] "euclidean"

$deterministic
[1] TRUE

$number.infected
[1] 31

$cutpoint
[1] 5

$number.outliers
[1] NA

$outliers
[1] 7

$duration
[1] 5

$computation.time
user.self 
     0.02 

$initialisation.computation.time
user.self 
        0 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EAdet", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("EAimp")
> ### * EAimp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EAimp
> ### Title: Epidemic Algorithm for imputation of multivariate outliers in
> ###   incomplete survey data.
> ### Aliases: EAimp
> ### Keywords: survey robust multivariate
> 
> ### ** Examples
> 
> data(bushfirem,bushfire.weights)
> det.res<-EAdet(bushfirem,bushfire.weights)

 EA detection has finished with 31 infected points in 0.01 seconds.> imp.res<-EAimp(bushfirem,bushfire.weights,outind=det.res$outind,
+ reach=det.res$output$max.min.di,kdon=3)
Missing values in outlier indicator set to FALSE.

 Dimensions (n,p): 38 5
 Number of complete records  11
 Number of records with maximum p/2 variables missing  36
 Number of imputands is  27
 Reach for imputation is  2.211133

 Number of remaining missing values is  0> print(imp.res$output)
$sample.size
[1] 38

$number.of.variables
[1] 5

$n.complete.records
[1] 11

$n.usable.records
[1] 36

$duration
[1] 5

$reach
[1] 2.211133

$threshold
[1] FALSE

$deterministic
[1] TRUE

$computation.time
user.self 
     0.04 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EAimp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ER")
> ### * ER
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ER
> ### Title: Robust EM-algorithm ER
> ### Aliases: ER
> ### Keywords: robust survey multivariate
> 
> ### ** Examples
> 
> data(bushfirem)
> data(bushfire.weights)
> det.res<-ER(bushfirem, weights=bushfire.weights,alpha=0.05,steps.output=TRUE,em.steps=100,tol=2e-6)
End of preprocessing
End of missingness statistics

 start.mean:  105.0345 122.2759 185.069 191.2759 256.7586 
 start.var:            X1         X2        X3         X4         X5
X1   458.6209   717.0618 -2450.104  -550.1745  -449.7294
X2   717.0618  1390.2390 -3232.885  -749.8654  -580.5604
X3 -2450.1044 -3232.8846 40675.363 14723.3338 12169.5824
X4  -550.1745  -749.8654 14723.334  5835.8434  4814.7940
X5  -449.7294  -580.5604 12169.582  4814.7940  3978.7885


 ER has detected 4 outlier(s) in 0.59 0 0.6 NA NA seconds. 
 
> PlotMD(det.res$dist,ncol(bushfirem))
$hmed
[1] 15.29326

$halpha
      29 
13.52484 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ER", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("GIMCD")
> ### * GIMCD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: GIMCD
> ### Title: Gaussian imputation followed by MCD
> ### Aliases: GIMCD
> ### Keywords: robust multivariate survey
> 
> ### ** Examples
> 
> data(bushfirem)
> det.res<-GIMCD(bushfirem,alpha=0.1)
GIMCD has detected 13 outliers in 0.06 0 0.06 NA NA seconds.> print(det.res$center)
      X1       X2       X3       X4       X5 
109.8055 148.6360 250.4265 210.8677 273.7194 
> PlotMD(det.res$dist,ncol(bushfirem))
$hmed
[1] 17.34033

$halpha
      34 
263.3957 

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("GIMCD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("MDmiss")
> ### * MDmiss
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: MDmiss
> ### Title: Mahalanobis distance (MD) for data with missing values.
> ### Aliases: MDmiss
> ### Keywords: ~kwd1 ~kwd2
> 
> ### ** Examples
> 
> data(bushfirem,bushfire)
> MDmiss(bushfirem,apply(bushfire,2,mean),var(bushfire))
         1          2          3          4          5          6          7 
 7.2160085  4.3257008  0.8440923  1.5134291  2.0969730  7.7609395 16.0537514 
         8          9         10         11         12         13         14 
12.7285244 13.9153844  5.4796427  6.1669445  8.2130006  8.9678140  1.2510538 
        15         16         17         18         19         20         21 
 6.5831730  2.8194816  2.3046020  5.2032014  2.7992887  2.3844491  2.1648484 
        22         23         24         25         26         27         28 
 3.6412421  1.0753593  1.8880181  1.1136020  0.8451837  1.5872090  2.4596324 
        29         30         31         32         33         34         35 
 5.6991877  4.5959379  5.7128476  8.3101486  5.3993714  4.6988444  5.0190419 
        36         37         38 
 6.4838249  4.8498564  7.2191933 
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("MDmiss", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("POEM")
> ### * POEM
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: POEM
> ### Title: Nearest Neighbour Imputation with Mahalanobis distance
> ### Aliases: POEM
> ### Keywords: robust multivariate survey
> 
> ### ** Examples
> 
> data(bushfirem)
> data(bushfire.weights)
> outliers<-rep(0,nrow(bushfirem))
> outliers[31:38]<-1
> imp.res<-POEM(bushfirem,bushfire.weights,outliers,prel=TRUE)

 Number of completely missing observations  0 

 Number of complete and error-free observations:  8 

 No donor for observation  3 
All complete error-free observations used as donors.

 No donor for observation  22 
All complete error-free observations used as donors.

 POEM has imputed 30 observations(s) in 0.05 0 0.05 NA NA seconds. 
 
> print(imp.res$output)
$preliminary.mean.imputation
[1] TRUE

$completely.missing
[1] 0

$good.values
X1 X2 X3 X4 X5 
83 84 72 68 88 

$nonoutliers.before
[1] 30

$weighted.nonoutliers.before
[1] 80

$number.of.nonoutliers.after.reweighting
[1] 30

$weighted.number.of.nonoutliers.after.reweighting
[1] 80

$old.center
      X1       X2       X3       X4       X5 
106.1831 140.9571 207.8214 194.5294 264.5942 

$old.variances
        X1         X2         X3         X4         X5 
  302.1214   537.6982 19497.2895  2075.0727  1058.2701 

$new.center
      X1       X2       X3       X4       X5 
104.3939 139.6970 249.1414 207.2727 270.9899 

$new.variances
        X1         X2         X3         X4         X5 
  328.6226   406.7163 16273.7174  1496.3802  1064.2726 

$covariance
           X1        X2         X3         X4         X5
X1  0.8875000 0.5255198 -0.3208593 -0.1038295 -0.1688350
X2  0.5255198 0.8750000  0.1631023  0.3148206  0.3804448
X3 -0.3208593 0.1631023  0.7000000  0.4887294  0.5871836
X4 -0.1038295 0.3148206  0.4887294  0.6375000  0.6180794
X5 -0.1688350 0.3804448  0.5871836  0.6180794  0.8625000

$imputed.observations
 1  2  3  5  7 11 13 14 15 16 17 18 20 21 22 23 25 26 27 28 29 30 31 32 33 34 
 1  2  3  5  7 11 13 14 15 16 17 18 20 21 22 23 25 26 27 28 29 30 31 32 33 34 
35 36 37 38 
35 36 37 38 

$donors
 [1]  4  4  4 29 10 10 24  4 16 17 16 19 19 19 19  4  4  4 24 24  5 24 24 19 19
[26] 19 19 19 19 19

$outind
 [1] 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1

> var(imp.res$imputed.data)
           X1       X2         X3        X4        X5
X1   335.8464 242.2461 -1256.6017 -247.2518 -173.4154
X2   242.2461 401.7127   203.9075  219.0512  243.1679
X3 -1256.6017 203.9075 16246.3933 4527.5206 3909.2020
X4  -247.2518 219.0512  4527.5206 1450.9815 1211.4694
X5  -173.4154 243.1679  3909.2020 1211.4694 1072.5206
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("POEM", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("TRC")
> ### * TRC
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: TRC
> ### Title: Transformed rank correlations for multivariate outlier detection
> ### Aliases: TRC
> ### Keywords: robust multivariate survey
> 
> ### ** Examples
> 
> data(bushfirem, bushfire.weights)
> det.res <- TRC(bushfirem, weights=bushfire.weights)

 Number of missing items:  38 , percentage of missing items:  0.2  

 TRC has detected 12 outlier(s) in 0.01 seconds.

> PlotMD(det.res$dist, ncol(bushfirem))
$hmed
[1] 9.740518

$halpha
[1] 152.4939

> print(det.res)
$output
$output$sample.size
[1] 38

$output$number.of.variables
[1] 5

$output$number.of.missing.items
37 28 32 13 31 27 22 36 14  3 33 30 38 
 0  1  1  2  1  2  3  1  2  3  1  2  2 

$output$significance.level
[1] 0.95

$output$computation.time
   user  system elapsed 
   0.01    0.00    0.02 

$output$medians
 X1  X2  X3  X4  X5 
 94 137 262 217 272 

$output$mads
       X1        X2        X3        X4        X5 
 22.23903  28.16944 243.14676  42.99546  38.54766 

$output$center
[1] 102.9417 140.2678 260.7464 214.1017 273.9415

$output$scatter
           [,1]       [,2]      [,3]      [,4]      [,5]
[1,]   436.4876   411.9066 -3067.307 -484.6323 -464.4097
[2,]   411.9066   666.6253 -1769.382 -205.2859 -233.0147
[3,] -3067.3074 -1769.3824 49278.905 8696.6204 7794.4695
[4,]  -484.6323  -205.2859  8696.620 1619.2943 1390.3511
[5,]  -464.4097  -233.0147  7794.469 1390.3511 1316.0551

$output$robust.regression
[1] "rank"

$output$md.type
[1] "m"

$output$cutpoint
[1] 9.740518


$outind
 [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE FALSE
[13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE
[25] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE  TRUE  TRUE  TRUE  TRUE  TRUE
[37]  TRUE  TRUE

$dist
 [1]   0.9730651   0.9070627   0.6341287   2.1842703   1.9774107   1.5710216
 [7]   4.8828072  63.6610679  70.0053143  25.1451324  13.1861691   3.9898161
[13]   9.5950131   0.7168970   3.3866737   4.2833851   3.5284921   0.9990468
[19]   2.8204776   0.8925833   3.3752709   0.9204353   1.0076298   2.0404772
[25]   0.6858223   0.4174840   1.6162909   2.9648905   5.9382574   3.8566028
[31]  15.1043601  55.7321605 176.7812804 149.2838076 152.4938539 127.8172818
[37] 160.5261581  27.6547673

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("TRC", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("bushfire")
> ### * bushfire
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: bushfire
> ### Title: Bushfire scars
> ### Aliases: bushfire bushfirem bushfire.weights
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(bushfire)
> ## maybe str(bushfire) ; plot(bushfire) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("bushfire", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("plotMD")
> ### * plotMD
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PlotMD
> ### Title: QQ-Plot of Mahalanobis distances
> ### Aliases: PlotMD
> ### Keywords: Mahalanobis distance QQ-plot
> 
> ### ** Examples
> 
> data(bushfirem,bushfire.weights)
> det.res<-TRC(bushfirem,weights=bushfire.weights)

 Number of missing items:  38 , percentage of missing items:  0.2  

 TRC has detected 12 outlier(s) in 0.02 seconds.

> PlotMD(det.res$dist,ncol(bushfirem))
$hmed
[1] 9.740518

$halpha
[1] 152.4939

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("plotMD", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("sepe")
> ### * sepe
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: sepe
> ### Title: Sample Environment Protection Expenditure Survey
> ### Aliases: sepe
> ### Keywords: datasets, multivariate, outliers, enterprise, missing values
> 
> ### ** Examples
> 
> data(sepe)
> ## maybe str(sepe) ; plot(sepe) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("sepe", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weighted.quantile")
> ### * weighted.quantile
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weighted.quantile
> ### Title: Quantiles of a weighted cdf
> ### Aliases: weighted.quantile
> 
> ### ** Examples
> 
> x<-rnorm(100)
> x[sample(1:100,20)]<-NA
> w<-rchisq(100,2)
> weighted.quantile(x,w,0.2,TRUE)
[1] -0.7099464
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weighted.quantile", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("weighted.var")
> ### * weighted.var
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: weighted.var
> ### Title: Weighted univariate variance coping with missing values
> ### Aliases: weighted.var
> 
> ### ** Examples
> 
> x<-rnorm(100)
> x[sample(1:100,20)]<-NA
> w<-rchisq(100,2)
> weighted.var(x,w,na.rm=TRUE)
[1] 1.02859
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("weighted.var", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("winsimp")
> ### * winsimp
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: Winsimp
> ### Title: Winsorization followed by imputation
> ### Aliases: Winsimp
> ### Keywords: robust multivariate survey
> 
> ### ** Examples
> 
> data(bushfirem,bushfire.weights)
> det.res<-TRC(bushfirem,weight=bushfire.weights)

 Number of missing items:  38 , percentage of missing items:  0.2  

 TRC has detected 12 outlier(s) in 0.01 seconds.

> imp.res<-Winsimp(bushfirem,det.res$output$center,det.res$output$scatter,det.res$outind)
> print(imp.res$output)
$cutpoint
[1] 3.631277

$proc.time
   user  system elapsed 
      0       0       0 

$n.missing.before
[1] 38

$n.missing.after
[1] 0

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("winsimp", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.03 0.06 1.11 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
